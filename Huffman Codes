import heapq 
class HuffmanNode: 
def __init__(self, char=None, freq=0): 
self.char = char 
self.freq = freq 
self.left = None 
self.right = None 
def __lt__(self, other): 
return self.freq < other.freq 
def build_huffman_tree(characters, frequencies): 
heap = [] 
for i in range(len(characters)): 
node = HuffmanNode(characters[i], frequencies[i]) 
heapq.heappush(heap, node) 
while len(heap) > 1: 
left = heapq.heappop(heap) 
right = heapq.heappop(heap)     
merged = HuffmanNode(None, left.freq + right.freq) 
merged.left = left 
merged.right = right  
heapq.heappush(heap, merged) 
return heap[0] 
def generate_huffman_codes(root): 
codes = {}  
def _generate_codes(node, current_code): 
if not node: 
return 
if node.char is not None: 
codes[node.char] = current_code 
_generate_codes(node.left, current_code + '0') 
_generate_codes(node.right, current_code + '1') 
_generate_codes(root, "") 
return codes 
def huffman_encoding(characters, frequencies): 
# Step 1: Build Huffman Tree 
huffman_tree_root = build_huffman_tree(characters, frequencies) 
huffman_codes = generate_huffman_codes(huffman_tree_root) 
return huffman_codes 
n = 4 
characters = ['a', 'b', 'c', 'd'] 
frequencies = [5, 9, 12, 13] 
huffman_codes = huffman_encoding(characters, frequencies) 
output = [(char, code) for char, code in huffman_codes.items()] 
print(output)
