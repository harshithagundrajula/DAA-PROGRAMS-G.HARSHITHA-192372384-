import numpy as np

# Initialize the distance matrix
routers = ['A', 'B', 'C', 'D', 'E', 'F']
distance_matrix = np.array([
    [0, 3, np.inf, np.inf, np.inf, 5],
    [3, 0, 1, 2, np.inf, np.inf],
    [np.inf, 1, 0, np.inf, 4, np.inf],
    [np.inf, 2, np.inf, 0, 3, np.inf],
    [np.inf, np.inf, 4, 3, 0, 2],
    [5, np.inf, np.inf, np.inf, 2, 0]
])

# Floyd's Algorithm implementation
def floyd_warshall(dist):
    num_routers = len(dist)
    for k in range(num_routers):
        for i in range(num_routers):
            for j in range(num_routers):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

# Calculate shortest paths
floyd_warshall(distance_matrix)

# Display shortest path from A to F before link failure
print(f"Router A to Router F = {distance_matrix[0][5]}")

# Simulate link failure between Router B and Router D
distance_matrix[1][3] = np.inf  # Set distance to infinity
distance_matrix[3][1] = np.inf  # Symmetric update

# Recalculate shortest paths after link failure
floyd_warshall(distance_matrix)

# Display shortest path from A to F after link failure
print(f"Router A to Router F after link failure = {distance_matrix[0][5]}")
