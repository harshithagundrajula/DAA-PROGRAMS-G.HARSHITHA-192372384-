import numpy as np

def floyd_warshall(n, edges):
    # Initialize the distance matrix
    dist = np.full((n, n), float('inf'))
    for i in range(n):
        dist[i][i] = 0
    
    # Fill the distance matrix with the given edges
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  # Assuming undirected graph

    print("Distance matrix before applying Floyd's Algorithm:")
    print(dist)

    # Floyd-Warshall Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    print("Distance matrix after applying Floyd's Algorithm:")
    print(dist)

    return dist

# Example usage
n = 5
edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distance_matrix = floyd_warshall(n, edges)

# Finding shortest path from C (2) to A (0)
shortest_path_CA = distance_matrix[2][0]
print(f"Shortest path from C to A: {shortest_path_CA}")

# Finding shortest path from E (4) to C (2)
shortest_path_EC = distance_matrix[4][2]
print(f"Shortest path from E to C: {shortest_path_EC}")
