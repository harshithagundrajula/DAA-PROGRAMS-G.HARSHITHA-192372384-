import numpy as np

def floyd_warshall(n, edges):
    # Initialize the distance matrix
    dist = np.full((n, n), float('inf'))
    for i in range(n):
        dist[i][i] = 0  # Distance to self is zero

    # Fill the distance matrix with initial edge weights
    for u, v, w in edges:
        dist[u][v] = w

    print("Distance matrix before applying Floyd's Algorithm:")
    print(dist)

    # Floyd-Warshall Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    print("Distance matrix after applying Floyd's Algorithm:")
    print(dist)

    # Identify the shortest path from City 1 to City 3
    shortest_path = dist[1][3]
    print(f"Shortest path from City 1 to City 3 = {shortest_path}")

# Example usage
n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
floyd_warshall(n, edges)
