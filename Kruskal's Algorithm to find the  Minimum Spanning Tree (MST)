class UnionFind: 
def __init__(self, n): 
self.parent = list(range(n)) 
self.rank = [0] * n 
def find(self, u): 
if self.parent[u] != u: 
self.parent[u] = self.find(self.parent[u])  # Path compression 
return self.parent[u] 
def union(self, u, v): 
root_u = self.find(u) 
root_v = self.find(v) 
if root_u != root_v: 
# Union by rank 
if self.rank[root_u] > self.rank[root_v]: 
self.parent[root_v] = root_u 
elif self.rank[root_u] < self.rank[root_v]: 
self.parent[root_u] = root_v 
else: 
self.parent[root_v] = root_u 
self.rank[root_u] += 1 
return True 
return False 
def kruskal(n, edges): 
edges.sort(key=lambda x: x[2])  # Sort by the third element (weight) 
uf = UnionFind(n) 
mst_edges = [] 
total_weight = 0 
for u, v, weight in edges: 
if uf.union(u, v):  # If u and v are not already connected 
mst_edges.append((u, v, weight)) 
total_weight += weight 
return mst_edges, total_weight 
n = 4 
m = 5 
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)] 
mst_edges, total_weight = kruskal(n, edges) 
print("Edges in MST:", mst_edges) 
print("Total weight of MST:", total_weight)
